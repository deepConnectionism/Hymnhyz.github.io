NVIDIA TensorRT的核心是一个C++库，可促进对NVIDIA图形处理单元（GPU）的高性能推断。 

TensorRT采用训练完成的网络，该网络由网络定义和一组训练好的参数组成，并生成高度优化的运行时引擎，该引擎为该网络执行推理。

TensorRT通过C++和Python提供API，可帮助通过Network Definition API表达深度学习模型，或通过解析器加载预定义的模型，从而使TensorRT可以在NVIDIA GPU上优化并运行它们。TensorRT应用了图优化，层融合以及其他优化，同时还利用各种高度优化的内核来找到该模型的最快实现。 TensorRT还支持runtime，您可以在Kepler以后的所有NVIDIA GPU上执行此网络。 

TensorRT还包括在Tegra X1中引入的可选高速混合精度功能，并扩展了： 

‣ NVIDIA® Ampere GPU architecture

‣ NVIDIA® Turing™
 GPU architecture

‣ NVIDIA® Volta™
 GPU architecture

‣ NVIDIA® Pascal™
 GPU architectu

### TensorRT Release 7.2.3

‣ TensorRT 7.2.3 has been tested with the following(参考TensorRT文件夹下面的TensorRT-Release-Notes.pdf文档-见1.2):

‣ **cuDNN 8.1.1**

‣ **TensorFlow 1.15.3**

    pip install tensorFlow-gpu==1.15.3  

‣ **PyTorch 1.5.0**

‣ **ONNX 1.6.0**

This TensorRT release supports **CUDA 10.2**, 11.0 update 1, 11.1 update 1, and 11.2 update

### 步骤1：安装
本文系统为：ubuntu 18.04

1.1 [TensorRT](https://developer.nvidia.com/compute/machine-learning/tensorrt/secure/7.2.3/tars/TensorRT-7.2.3.4.Ubuntu-18.04.x86_64-gnu.cuda-10.2.cudnn8.1.tar.gz)下载

1.2 解压

    tar xzvf ./TensorRT-7.2.3.4.Ubuntu-18.04.x86_64-gnu.cuda-10.2.cudnn8.1.tar.gz
这里可以看到上面的TensorRT-Release-Notes.pdf文件。

1.3 添加环境变量

    export LD_LIBRARY_PATH=$LD_LIBRARY_PATH:/home/用户名/TensorRT-7.2.3.4/lib 

1.4 安装python的TensorRT包

    cd TensorRT-7.2.3.4/python
    ls

    tensorrt-7.2.3.4-cp27-none-linux_x86_64.whl
    tensorrt-7.2.3.4-cp34-none-linux_x86_64.whl
    tensorrt-7.2.3.4-cp35-none-linux_x86_64.whl
    tensorrt-7.2.3.4-cp36-none-linux_x86_64.whl
    tensorrt-7.2.3.4-cp37-none-linux_x86_64.whl
    tensorrt-7.2.3.4-cp38-none-linux_x86_64.whl
选择适合的Python版本文件，这里我选的3.6

    pip install tensorrt-7.2.3.4-cp36-none-linux_x86_64.whl 
1.5 安装python UFF包（Tensorflow的pb模型文件转为TensorRT文件）

    cd uff  
    pip install ./uff-0.6.9-py2.py3-none-any.whl  

1.6 安装python graphsurgeon（自定义网络结构）

    cd graphsurgeon                
    pip install ./graphsurgeon-0.4.5-py2.py3-none-any.whl  

### 步骤2：测试
2.1

    cd samples/python/end_to_end_tensorflow_mnist 
    mkdir models    
    python model.py  #训练le-net模型，得到lenet5.pb
    cd ../../../data/mnist
    python download_pgms.py  #下载mnist数据
注：报网络错误的话可以自己下载，放到该文件夹下，然后修改download_pgms.py 35行与38行为

    35     with open("./train-images-idx3-ubyte.gz", 'rb') as res:
    36         data = load_mnist_data(gzip.decompress(res.read()))
    37 
    38     with open("./train-labels-idx1-ubyte.gz", 'rb') as res:
    39         labels = load_mnist_labels(gzip.decompress(res.read()))

2.2 生成uff文件

    cd samples/python/end_to_end_tensorflow_mnist
    convert-to-uff ./models/lenet5.pb #转换为lenet5.uff文件
2.3 输出结果

    pip install pycuda  
    python sample.py -d ../../../data                           
输出：
Test Case: 3
Prediction: 3

注：cudnn版本为8.1.1，去[下载](https://developer.nvidia.com/compute/machine-learning/cudnn/secure/8.1.1.33/10.2_20210301/cudnn-10.2-linux-x64-v8.1.1.33.tgz)

    tar -xvf  ./cudnn-10.2-linux-x64-v8.1.1.33.tgz 
    sudo cp cuda/include/cudnn*.h /usr/local/cuda/include/          
    sudo cp cuda/lib64/libcudnn* /usr/local/cuda/lib64/ 
    sudo chmod a+r /usr/local/cuda/include/cudnn*.h 
    sudo chmod a+r /usr/local/cuda/lib64/libcudnn* 
